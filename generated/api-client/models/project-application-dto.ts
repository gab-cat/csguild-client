/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { ProjectApplicationDtoProjectRole } from './project-application-dto-project-role';
// May contain unused imports in some cases
// @ts-ignore
import { UserBasicDto } from './user-basic-dto';

/**
 * 
 * @export
 * @interface ProjectApplicationDto
 */
export interface ProjectApplicationDto {
    /**
     * 
     * @type {string}
     * @memberof ProjectApplicationDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectApplicationDto
     */
    'projectSlug': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectApplicationDto
     */
    'userSlug': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectApplicationDto
     */
    'roleSlug': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectApplicationDto
     */
    'status': ProjectApplicationDtoStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ProjectApplicationDto
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectApplicationDto
     */
    'reviewMessage'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectApplicationDto
     */
    'createdAt': string;
    /**
     * 
     * @type {UserBasicDto}
     * @memberof ProjectApplicationDto
     */
    'user': UserBasicDto;
    /**
     * 
     * @type {ProjectApplicationDtoProjectRole}
     * @memberof ProjectApplicationDto
     */
    'projectRole': ProjectApplicationDtoProjectRole;
    /**
     * 
     * @type {UserBasicDto}
     * @memberof ProjectApplicationDto
     */
    'reviewer'?: UserBasicDto;
}

export const ProjectApplicationDtoStatusEnum = {
    PENDING: 'PENDING',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED'
} as const;

export type ProjectApplicationDtoStatusEnum = typeof ProjectApplicationDtoStatusEnum[keyof typeof ProjectApplicationDtoStatusEnum];


