/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface UserResponseDto
 */
export interface UserResponseDto {
    /**
     * Unique user identifier
     * @type {string}
     * @memberof UserResponseDto
     */
    'id': string;
    /**
     * Student email address
     * @type {string}
     * @memberof UserResponseDto
     */
    'email': string;
    /**
     * Student username
     * @type {string}
     * @memberof UserResponseDto
     */
    'username': string;
    /**
     * Student first name
     * @type {string}
     * @memberof UserResponseDto
     */
    'firstName': string;
    /**
     * Student last name
     * @type {string}
     * @memberof UserResponseDto
     */
    'lastName': string;
    /**
     * Student birthdate
     * @type {string}
     * @memberof UserResponseDto
     */
    'birthdate'?: string;
    /**
     * Student course/program
     * @type {string}
     * @memberof UserResponseDto
     */
    'course'?: string;
    /**
     * Profile image URL
     * @type {string}
     * @memberof UserResponseDto
     */
    'imageUrl'?: string;
    /**
     * Whether email is verified
     * @type {boolean}
     * @memberof UserResponseDto
     */
    'emailVerified': boolean;
    /**
     * Whether user has an active refresh token
     * @type {boolean}
     * @memberof UserResponseDto
     */
    'hasRefreshToken': boolean;
    /**
     * Whether user has RFID card registered
     * @type {boolean}
     * @memberof UserResponseDto
     */
    'hasRfidCard': boolean;
    /**
     * RFID card ID
     * @type {string}
     * @memberof UserResponseDto
     */
    'rfidId'?: string;
    /**
     * User roles in the system
     * @type {Array<string>}
     * @memberof UserResponseDto
     */
    'roles': Array<UserResponseDtoRolesEnum>;
    /**
     * Signup method used for registration
     * @type {string}
     * @memberof UserResponseDto
     */
    'signupMethod'?: UserResponseDtoSignupMethodEnum;
    /**
     * Account creation timestamp
     * @type {string}
     * @memberof UserResponseDto
     */
    'createdAt': string;
    /**
     * Account last updated timestamp
     * @type {string}
     * @memberof UserResponseDto
     */
    'updatedAt': string;
    /**
     * Current facility ID the user is associated with
     * @type {string}
     * @memberof UserResponseDto
     */
    'currentFacilityId'?: string;
}

export const UserResponseDtoRolesEnum = {
    STUDENT: 'STUDENT',
    USER: 'USER',
    STAFF: 'STAFF',
    ADMIN: 'ADMIN'
} as const;

export type UserResponseDtoRolesEnum = typeof UserResponseDtoRolesEnum[keyof typeof UserResponseDtoRolesEnum];
export const UserResponseDtoSignupMethodEnum = {
    GOOGLE: 'GOOGLE',
    EMAIL: 'EMAIL',
    FACEBOOK: 'FACEBOOK',
    APPLE: 'APPLE'
} as const;

export type UserResponseDtoSignupMethodEnum = typeof UserResponseDtoSignupMethodEnum[keyof typeof UserResponseDtoSignupMethodEnum];


