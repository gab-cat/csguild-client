/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * Student email address (must be unique)
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'email'?: string;
    /**
     * Username (must be unique, 3-30 characters, alphanumeric and underscores only)
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'username'?: string;
    /**
     * Strong password meeting security requirements
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'password'?: string;
    /**
     * Student first name
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'firstName'?: string;
    /**
     * Student last name
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'lastName'?: string;
    /**
     * Student birthdate (ISO date format)
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'birthdate'?: string;
    /**
     * Student course/program
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'course'?: string;
    /**
     * RFID card ID (optional, for RFID-based registration)
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'rfidId'?: string;
    /**
     * Profile image URL (optional, typically from OAuth providers)
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'imageUrl'?: string;
    /**
     * Signup method used for registration
     * @type {string}
     * @memberof UpdateUserRequest
     */
    'signupMethod'?: UpdateUserRequestSignupMethodEnum;
}

export const UpdateUserRequestSignupMethodEnum = {
    GOOGLE: 'GOOGLE',
    EMAIL: 'EMAIL',
    FACEBOOK: 'FACEBOOK',
    APPLE: 'APPLE'
} as const;

export type UpdateUserRequestSignupMethodEnum = typeof UpdateUserRequestSignupMethodEnum[keyof typeof UpdateUserRequestSignupMethodEnum];


