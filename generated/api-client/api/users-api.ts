// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateUserRequest } from '../models';
// @ts-ignore
import { CreateUserResponseDto } from '../models';
// @ts-ignore
import { EmailVerificationResponseDto } from '../models';
// @ts-ignore
import { RegisterRfidDto } from '../models';
// @ts-ignore
import { RfidLoginDto } from '../models';
// @ts-ignore
import { RfidLoginResponseDto } from '../models';
// @ts-ignore
import { RfidRegistrationResponseDto } from '../models';
// @ts-ignore
import { SendEmailVerificationDto } from '../models';
// @ts-ignore
import { UpdateUserRequest } from '../models';
// @ts-ignore
import { UserResponseDto } from '../models';
// @ts-ignore
import { VerifyEmailDto } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *        Creates a new student account for CSGUILD with comprehensive profile information.              ## How it works:       1. Validates all student information including unique email and username       2. Hashes password using bcryptjs for security       3. Generates email verification code       4. Stores student in PostgreSQL database       5. Sends verification email with 6-digit code       6. Returns success response with verification instructions              ## Student Information Required:       - Email address (must be unique)       - Username (must be unique, 3-30 characters, alphanumeric and underscores only)       - Strong password (minimum 8 characters with mixed case, numbers, and special characters)       - First and last name       - Optional: birthdate, course, RFID card ID              ## Post-Registration:       - Student must verify email before accessing all features       - RFID can be registered during signup or later       - Default role: STUDENT     
         * @summary Register a new student account
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateUser: async (createUserRequest: CreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequest' is not null or undefined
            assertParamExists('usersControllerCreateUser', 'createUserRequest', createUserRequest)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Retrieves a specific student\'s information by their ID.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies.              ## Access Control:       - Students can only access their own information       - STAFF and ADMIN can access any student\'s information     
         * @summary Get student by ID
         * @param {string} id Student ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUser: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerGetUser', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Retrieves all student accounts from the database.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies and STAFF or ADMIN role.              ## How it works:       1. Validates JWT token using JwtAuthGuard (JwtStrategy)       2. Checks user has STAFF or ADMIN role       3. Returns all students with comprehensive information       4. Excludes sensitive data like passwords and verification codes              ## Required cookies:       - `Authentication`: Valid JWT access token              ## Required roles:       - STAFF or ADMIN     
         * @summary Get all students (protected)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Registers an RFID card for quick access and attendance tracking.              ## How it works:       1. Validates that RFID card is not already registered       2. Associates RFID card with current student account       3. Sends confirmation email with RFID details       4. Enables RFID-based login and attendance              ## RFID Features:       - Quick login without username/password       - Automatic attendance tracking at events       - Access control for CSGUILD facilities       - Integration with lab equipment              ## Requirements:       - Student must be logged in       - Email must be verified       - RFID card must be unique     
         * @summary Register RFID card for student
         * @param {RegisterRfidDto} registerRfidDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegisterRfid: async (registerRfidDto: RegisterRfidDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRfidDto' is not null or undefined
            assertParamExists('usersControllerRegisterRfid', 'registerRfidDto', registerRfidDto)
            const localVarPath = `/api/users/register-rfid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRfidDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Resends the email verification code to a student\'s email address.              ## How it works:       1. Checks if email exists and is not already verified       2. Generates new 6-digit verification code       3. Updates code in database       4. Sends new verification email              ## Use Cases:       - Original verification email was not received       - Verification code expired       - Student accidentally deleted the email     
         * @summary Resend email verification code
         * @param {SendEmailVerificationDto} sendEmailVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerResendVerification: async (sendEmailVerificationDto: SendEmailVerificationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendEmailVerificationDto' is not null or undefined
            assertParamExists('usersControllerResendVerification', 'sendEmailVerificationDto', sendEmailVerificationDto)
            const localVarPath = `/api/users/resend-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendEmailVerificationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Authenticate a student using their registered RFID card.              ## How it works:       1. Validates RFID card is registered in the system       2. Checks that associated email is verified       3. Returns student information for frontend processing       4. Can be used to trigger attendance tracking              ## Use Cases:       - Quick login at CSGUILD terminals       - Attendance tracking at events       - Access control for facilities       - Integration with lab equipment              ## Security:       - Requires email verification       - RFID must be registered to valid student       - Returns minimal student information     
         * @summary Login using RFID card
         * @param {RfidLoginDto} rfidLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRfidLogin: async (rfidLoginDto: RfidLoginDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rfidLoginDto' is not null or undefined
            assertParamExists('usersControllerRfidLogin', 'rfidLoginDto', rfidLoginDto)
            const localVarPath = `/api/users/rfid-login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rfidLoginDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a user
         * @summary Update user
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser: async (updateUserRequest: UpdateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateUserRequest' is not null or undefined
            assertParamExists('usersControllerUpdateUser', 'updateUserRequest', updateUserRequest)
            const localVarPath = `/api/users/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Verifies a student\'s email address using the 6-digit code sent via email.              ## How it works:       1. Validates the provided email and verification code       2. Marks email as verified in the database       3. Sends welcome email with login instructions       4. Enables full access to CSGUILD features              ## After Verification:       - Student can access all CSGUILD features       - RFID login becomes available (if RFID is registered)       - Welcome email is sent with account details     
         * @summary Verify student email address
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerVerifyEmail: async (verifyEmailDto: VerifyEmailDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyEmailDto' is not null or undefined
            assertParamExists('usersControllerVerifyEmail', 'verifyEmailDto', verifyEmailDto)
            const localVarPath = `/api/users/verify-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyEmailDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         *        Creates a new student account for CSGUILD with comprehensive profile information.              ## How it works:       1. Validates all student information including unique email and username       2. Hashes password using bcryptjs for security       3. Generates email verification code       4. Stores student in PostgreSQL database       5. Sends verification email with 6-digit code       6. Returns success response with verification instructions              ## Student Information Required:       - Email address (must be unique)       - Username (must be unique, 3-30 characters, alphanumeric and underscores only)       - Strong password (minimum 8 characters with mixed case, numbers, and special characters)       - First and last name       - Optional: birthdate, course, RFID card ID              ## Post-Registration:       - Student must verify email before accessing all features       - RFID can be registered during signup or later       - Default role: STUDENT     
         * @summary Register a new student account
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreateUser(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreateUser(createUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Retrieves a specific student\'s information by their ID.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies.              ## Access Control:       - Students can only access their own information       - STAFF and ADMIN can access any student\'s information     
         * @summary Get student by ID
         * @param {string} id Student ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetUser(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Retrieves all student accounts from the database.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies and STAFF or ADMIN role.              ## How it works:       1. Validates JWT token using JwtAuthGuard (JwtStrategy)       2. Checks user has STAFF or ADMIN role       3. Returns all students with comprehensive information       4. Excludes sensitive data like passwords and verification codes              ## Required cookies:       - `Authentication`: Valid JWT access token              ## Required roles:       - STAFF or ADMIN     
         * @summary Get all students (protected)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerGetUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerGetUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Registers an RFID card for quick access and attendance tracking.              ## How it works:       1. Validates that RFID card is not already registered       2. Associates RFID card with current student account       3. Sends confirmation email with RFID details       4. Enables RFID-based login and attendance              ## RFID Features:       - Quick login without username/password       - Automatic attendance tracking at events       - Access control for CSGUILD facilities       - Integration with lab equipment              ## Requirements:       - Student must be logged in       - Email must be verified       - RFID card must be unique     
         * @summary Register RFID card for student
         * @param {RegisterRfidDto} registerRfidDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRegisterRfid(registerRfidDto: RegisterRfidDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RfidRegistrationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRegisterRfid(registerRfidDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Resends the email verification code to a student\'s email address.              ## How it works:       1. Checks if email exists and is not already verified       2. Generates new 6-digit verification code       3. Updates code in database       4. Sends new verification email              ## Use Cases:       - Original verification email was not received       - Verification code expired       - Student accidentally deleted the email     
         * @summary Resend email verification code
         * @param {SendEmailVerificationDto} sendEmailVerificationDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerResendVerification(sendEmailVerificationDto: SendEmailVerificationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailVerificationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerResendVerification(sendEmailVerificationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Authenticate a student using their registered RFID card.              ## How it works:       1. Validates RFID card is registered in the system       2. Checks that associated email is verified       3. Returns student information for frontend processing       4. Can be used to trigger attendance tracking              ## Use Cases:       - Quick login at CSGUILD terminals       - Attendance tracking at events       - Access control for facilities       - Integration with lab equipment              ## Security:       - Requires email verification       - RFID must be registered to valid student       - Returns minimal student information     
         * @summary Login using RFID card
         * @param {RfidLoginDto} rfidLoginDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRfidLogin(rfidLoginDto: RfidLoginDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RfidLoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRfidLogin(rfidLoginDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a user
         * @summary Update user
         * @param {UpdateUserRequest} updateUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdateUser(updateUserRequest: UpdateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdateUser(updateUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Verifies a student\'s email address using the 6-digit code sent via email.              ## How it works:       1. Validates the provided email and verification code       2. Marks email as verified in the database       3. Sends welcome email with login instructions       4. Enables full access to CSGUILD features              ## After Verification:       - Student can access all CSGUILD features       - RFID login becomes available (if RFID is registered)       - Welcome email is sent with account details     
         * @summary Verify student email address
         * @param {VerifyEmailDto} verifyEmailDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerVerifyEmail(verifyEmailDto: VerifyEmailDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailVerificationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerVerifyEmail(verifyEmailDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         *        Creates a new student account for CSGUILD with comprehensive profile information.              ## How it works:       1. Validates all student information including unique email and username       2. Hashes password using bcryptjs for security       3. Generates email verification code       4. Stores student in PostgreSQL database       5. Sends verification email with 6-digit code       6. Returns success response with verification instructions              ## Student Information Required:       - Email address (must be unique)       - Username (must be unique, 3-30 characters, alphanumeric and underscores only)       - Strong password (minimum 8 characters with mixed case, numbers, and special characters)       - First and last name       - Optional: birthdate, course, RFID card ID              ## Post-Registration:       - Student must verify email before accessing all features       - RFID can be registered during signup or later       - Default role: STUDENT     
         * @summary Register a new student account
         * @param {UsersApiUsersControllerCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreateUser(requestParameters: UsersApiUsersControllerCreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<CreateUserResponseDto> {
            return localVarFp.usersControllerCreateUser(requestParameters.createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *        Retrieves a specific student\'s information by their ID.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies.              ## Access Control:       - Students can only access their own information       - STAFF and ADMIN can access any student\'s information     
         * @summary Get student by ID
         * @param {UsersApiUsersControllerGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUser(requestParameters: UsersApiUsersControllerGetUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponseDto> {
            return localVarFp.usersControllerGetUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *        Retrieves all student accounts from the database.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies and STAFF or ADMIN role.              ## How it works:       1. Validates JWT token using JwtAuthGuard (JwtStrategy)       2. Checks user has STAFF or ADMIN role       3. Returns all students with comprehensive information       4. Excludes sensitive data like passwords and verification codes              ## Required cookies:       - `Authentication`: Valid JWT access token              ## Required roles:       - STAFF or ADMIN     
         * @summary Get all students (protected)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUsers(options?: AxiosRequestConfig): AxiosPromise<Array<UserResponseDto>> {
            return localVarFp.usersControllerGetUsers(options).then((request) => request(axios, basePath));
        },
        /**
         *        Registers an RFID card for quick access and attendance tracking.              ## How it works:       1. Validates that RFID card is not already registered       2. Associates RFID card with current student account       3. Sends confirmation email with RFID details       4. Enables RFID-based login and attendance              ## RFID Features:       - Quick login without username/password       - Automatic attendance tracking at events       - Access control for CSGUILD facilities       - Integration with lab equipment              ## Requirements:       - Student must be logged in       - Email must be verified       - RFID card must be unique     
         * @summary Register RFID card for student
         * @param {UsersApiUsersControllerRegisterRfidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRegisterRfid(requestParameters: UsersApiUsersControllerRegisterRfidRequest, options?: AxiosRequestConfig): AxiosPromise<RfidRegistrationResponseDto> {
            return localVarFp.usersControllerRegisterRfid(requestParameters.registerRfidDto, options).then((request) => request(axios, basePath));
        },
        /**
         *        Resends the email verification code to a student\'s email address.              ## How it works:       1. Checks if email exists and is not already verified       2. Generates new 6-digit verification code       3. Updates code in database       4. Sends new verification email              ## Use Cases:       - Original verification email was not received       - Verification code expired       - Student accidentally deleted the email     
         * @summary Resend email verification code
         * @param {UsersApiUsersControllerResendVerificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerResendVerification(requestParameters: UsersApiUsersControllerResendVerificationRequest, options?: AxiosRequestConfig): AxiosPromise<EmailVerificationResponseDto> {
            return localVarFp.usersControllerResendVerification(requestParameters.sendEmailVerificationDto, options).then((request) => request(axios, basePath));
        },
        /**
         *        Authenticate a student using their registered RFID card.              ## How it works:       1. Validates RFID card is registered in the system       2. Checks that associated email is verified       3. Returns student information for frontend processing       4. Can be used to trigger attendance tracking              ## Use Cases:       - Quick login at CSGUILD terminals       - Attendance tracking at events       - Access control for facilities       - Integration with lab equipment              ## Security:       - Requires email verification       - RFID must be registered to valid student       - Returns minimal student information     
         * @summary Login using RFID card
         * @param {UsersApiUsersControllerRfidLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRfidLogin(requestParameters: UsersApiUsersControllerRfidLoginRequest, options?: AxiosRequestConfig): AxiosPromise<RfidLoginResponseDto> {
            return localVarFp.usersControllerRfidLogin(requestParameters.rfidLoginDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a user
         * @summary Update user
         * @param {UsersApiUsersControllerUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUser(requestParameters: UsersApiUsersControllerUpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponseDto> {
            return localVarFp.usersControllerUpdateUser(requestParameters.updateUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *        Verifies a student\'s email address using the 6-digit code sent via email.              ## How it works:       1. Validates the provided email and verification code       2. Marks email as verified in the database       3. Sends welcome email with login instructions       4. Enables full access to CSGUILD features              ## After Verification:       - Student can access all CSGUILD features       - RFID login becomes available (if RFID is registered)       - Welcome email is sent with account details     
         * @summary Verify student email address
         * @param {UsersApiUsersControllerVerifyEmailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerVerifyEmail(requestParameters: UsersApiUsersControllerVerifyEmailRequest, options?: AxiosRequestConfig): AxiosPromise<EmailVerificationResponseDto> {
            return localVarFp.usersControllerVerifyEmail(requestParameters.verifyEmailDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     *        Creates a new student account for CSGUILD with comprehensive profile information.              ## How it works:       1. Validates all student information including unique email and username       2. Hashes password using bcryptjs for security       3. Generates email verification code       4. Stores student in PostgreSQL database       5. Sends verification email with 6-digit code       6. Returns success response with verification instructions              ## Student Information Required:       - Email address (must be unique)       - Username (must be unique, 3-30 characters, alphanumeric and underscores only)       - Strong password (minimum 8 characters with mixed case, numbers, and special characters)       - First and last name       - Optional: birthdate, course, RFID card ID              ## Post-Registration:       - Student must verify email before accessing all features       - RFID can be registered during signup or later       - Default role: STUDENT     
     * @summary Register a new student account
     * @param {CreateUserRequest} createUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersControllerCreateUser(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig): AxiosPromise<CreateUserResponseDto>;

    /**
     *        Retrieves a specific student\'s information by their ID.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies.              ## Access Control:       - Students can only access their own information       - STAFF and ADMIN can access any student\'s information     
     * @summary Get student by ID
     * @param {string} id Student ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersControllerGetUser(id: string, options?: AxiosRequestConfig): AxiosPromise<UserResponseDto>;

    /**
     *        Retrieves all student accounts from the database.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies and STAFF or ADMIN role.              ## How it works:       1. Validates JWT token using JwtAuthGuard (JwtStrategy)       2. Checks user has STAFF or ADMIN role       3. Returns all students with comprehensive information       4. Excludes sensitive data like passwords and verification codes              ## Required cookies:       - `Authentication`: Valid JWT access token              ## Required roles:       - STAFF or ADMIN     
     * @summary Get all students (protected)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersControllerGetUsers(options?: AxiosRequestConfig): AxiosPromise<Array<UserResponseDto>>;

    /**
     *        Registers an RFID card for quick access and attendance tracking.              ## How it works:       1. Validates that RFID card is not already registered       2. Associates RFID card with current student account       3. Sends confirmation email with RFID details       4. Enables RFID-based login and attendance              ## RFID Features:       - Quick login without username/password       - Automatic attendance tracking at events       - Access control for CSGUILD facilities       - Integration with lab equipment              ## Requirements:       - Student must be logged in       - Email must be verified       - RFID card must be unique     
     * @summary Register RFID card for student
     * @param {RegisterRfidDto} registerRfidDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersControllerRegisterRfid(registerRfidDto: RegisterRfidDto, options?: AxiosRequestConfig): AxiosPromise<RfidRegistrationResponseDto>;

    /**
     *        Resends the email verification code to a student\'s email address.              ## How it works:       1. Checks if email exists and is not already verified       2. Generates new 6-digit verification code       3. Updates code in database       4. Sends new verification email              ## Use Cases:       - Original verification email was not received       - Verification code expired       - Student accidentally deleted the email     
     * @summary Resend email verification code
     * @param {SendEmailVerificationDto} sendEmailVerificationDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersControllerResendVerification(sendEmailVerificationDto: SendEmailVerificationDto, options?: AxiosRequestConfig): AxiosPromise<EmailVerificationResponseDto>;

    /**
     *        Authenticate a student using their registered RFID card.              ## How it works:       1. Validates RFID card is registered in the system       2. Checks that associated email is verified       3. Returns student information for frontend processing       4. Can be used to trigger attendance tracking              ## Use Cases:       - Quick login at CSGUILD terminals       - Attendance tracking at events       - Access control for facilities       - Integration with lab equipment              ## Security:       - Requires email verification       - RFID must be registered to valid student       - Returns minimal student information     
     * @summary Login using RFID card
     * @param {RfidLoginDto} rfidLoginDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersControllerRfidLogin(rfidLoginDto: RfidLoginDto, options?: AxiosRequestConfig): AxiosPromise<RfidLoginResponseDto>;

    /**
     * Updates a user
     * @summary Update user
     * @param {UpdateUserRequest} updateUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersControllerUpdateUser(updateUserRequest: UpdateUserRequest, options?: AxiosRequestConfig): AxiosPromise<UserResponseDto>;

    /**
     *        Verifies a student\'s email address using the 6-digit code sent via email.              ## How it works:       1. Validates the provided email and verification code       2. Marks email as verified in the database       3. Sends welcome email with login instructions       4. Enables full access to CSGUILD features              ## After Verification:       - Student can access all CSGUILD features       - RFID login becomes available (if RFID is registered)       - Welcome email is sent with account details     
     * @summary Verify student email address
     * @param {VerifyEmailDto} verifyEmailDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    usersControllerVerifyEmail(verifyEmailDto: VerifyEmailDto, options?: AxiosRequestConfig): AxiosPromise<EmailVerificationResponseDto>;

}

/**
 * Request parameters for usersControllerCreateUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerCreateUserRequest
 */
export interface UsersApiUsersControllerCreateUserRequest {
    /**
     * 
     * @type {CreateUserRequest}
     * @memberof UsersApiUsersControllerCreateUser
     */
    readonly createUserRequest: CreateUserRequest
}

/**
 * Request parameters for usersControllerGetUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerGetUserRequest
 */
export interface UsersApiUsersControllerGetUserRequest {
    /**
     * Student ID
     * @type {string}
     * @memberof UsersApiUsersControllerGetUser
     */
    readonly id: string
}

/**
 * Request parameters for usersControllerRegisterRfid operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerRegisterRfidRequest
 */
export interface UsersApiUsersControllerRegisterRfidRequest {
    /**
     * 
     * @type {RegisterRfidDto}
     * @memberof UsersApiUsersControllerRegisterRfid
     */
    readonly registerRfidDto: RegisterRfidDto
}

/**
 * Request parameters for usersControllerResendVerification operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerResendVerificationRequest
 */
export interface UsersApiUsersControllerResendVerificationRequest {
    /**
     * 
     * @type {SendEmailVerificationDto}
     * @memberof UsersApiUsersControllerResendVerification
     */
    readonly sendEmailVerificationDto: SendEmailVerificationDto
}

/**
 * Request parameters for usersControllerRfidLogin operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerRfidLoginRequest
 */
export interface UsersApiUsersControllerRfidLoginRequest {
    /**
     * 
     * @type {RfidLoginDto}
     * @memberof UsersApiUsersControllerRfidLogin
     */
    readonly rfidLoginDto: RfidLoginDto
}

/**
 * Request parameters for usersControllerUpdateUser operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerUpdateUserRequest
 */
export interface UsersApiUsersControllerUpdateUserRequest {
    /**
     * 
     * @type {UpdateUserRequest}
     * @memberof UsersApiUsersControllerUpdateUser
     */
    readonly updateUserRequest: UpdateUserRequest
}

/**
 * Request parameters for usersControllerVerifyEmail operation in UsersApi.
 * @export
 * @interface UsersApiUsersControllerVerifyEmailRequest
 */
export interface UsersApiUsersControllerVerifyEmailRequest {
    /**
     * 
     * @type {VerifyEmailDto}
     * @memberof UsersApiUsersControllerVerifyEmail
     */
    readonly verifyEmailDto: VerifyEmailDto
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     *        Creates a new student account for CSGUILD with comprehensive profile information.              ## How it works:       1. Validates all student information including unique email and username       2. Hashes password using bcryptjs for security       3. Generates email verification code       4. Stores student in PostgreSQL database       5. Sends verification email with 6-digit code       6. Returns success response with verification instructions              ## Student Information Required:       - Email address (must be unique)       - Username (must be unique, 3-30 characters, alphanumeric and underscores only)       - Strong password (minimum 8 characters with mixed case, numbers, and special characters)       - First and last name       - Optional: birthdate, course, RFID card ID              ## Post-Registration:       - Student must verify email before accessing all features       - RFID can be registered during signup or later       - Default role: STUDENT     
     * @summary Register a new student account
     * @param {UsersApiUsersControllerCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreateUser(requestParameters: UsersApiUsersControllerCreateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreateUser(requestParameters.createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Retrieves a specific student\'s information by their ID.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies.              ## Access Control:       - Students can only access their own information       - STAFF and ADMIN can access any student\'s information     
     * @summary Get student by ID
     * @param {UsersApiUsersControllerGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUser(requestParameters: UsersApiUsersControllerGetUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Retrieves all student accounts from the database.              ## Authentication required:       This endpoint requires a valid JWT access token in cookies and STAFF or ADMIN role.              ## How it works:       1. Validates JWT token using JwtAuthGuard (JwtStrategy)       2. Checks user has STAFF or ADMIN role       3. Returns all students with comprehensive information       4. Excludes sensitive data like passwords and verification codes              ## Required cookies:       - `Authentication`: Valid JWT access token              ## Required roles:       - STAFF or ADMIN     
     * @summary Get all students (protected)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerGetUsers(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerGetUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Registers an RFID card for quick access and attendance tracking.              ## How it works:       1. Validates that RFID card is not already registered       2. Associates RFID card with current student account       3. Sends confirmation email with RFID details       4. Enables RFID-based login and attendance              ## RFID Features:       - Quick login without username/password       - Automatic attendance tracking at events       - Access control for CSGUILD facilities       - Integration with lab equipment              ## Requirements:       - Student must be logged in       - Email must be verified       - RFID card must be unique     
     * @summary Register RFID card for student
     * @param {UsersApiUsersControllerRegisterRfidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRegisterRfid(requestParameters: UsersApiUsersControllerRegisterRfidRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRegisterRfid(requestParameters.registerRfidDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Resends the email verification code to a student\'s email address.              ## How it works:       1. Checks if email exists and is not already verified       2. Generates new 6-digit verification code       3. Updates code in database       4. Sends new verification email              ## Use Cases:       - Original verification email was not received       - Verification code expired       - Student accidentally deleted the email     
     * @summary Resend email verification code
     * @param {UsersApiUsersControllerResendVerificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerResendVerification(requestParameters: UsersApiUsersControllerResendVerificationRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerResendVerification(requestParameters.sendEmailVerificationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Authenticate a student using their registered RFID card.              ## How it works:       1. Validates RFID card is registered in the system       2. Checks that associated email is verified       3. Returns student information for frontend processing       4. Can be used to trigger attendance tracking              ## Use Cases:       - Quick login at CSGUILD terminals       - Attendance tracking at events       - Access control for facilities       - Integration with lab equipment              ## Security:       - Requires email verification       - RFID must be registered to valid student       - Returns minimal student information     
     * @summary Login using RFID card
     * @param {UsersApiUsersControllerRfidLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRfidLogin(requestParameters: UsersApiUsersControllerRfidLoginRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRfidLogin(requestParameters.rfidLoginDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a user
     * @summary Update user
     * @param {UsersApiUsersControllerUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdateUser(requestParameters: UsersApiUsersControllerUpdateUserRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdateUser(requestParameters.updateUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Verifies a student\'s email address using the 6-digit code sent via email.              ## How it works:       1. Validates the provided email and verification code       2. Marks email as verified in the database       3. Sends welcome email with login instructions       4. Enables full access to CSGUILD features              ## After Verification:       - Student can access all CSGUILD features       - RFID login becomes available (if RFID is registered)       - Welcome email is sent with account details     
     * @summary Verify student email address
     * @param {UsersApiUsersControllerVerifyEmailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerVerifyEmail(requestParameters: UsersApiUsersControllerVerifyEmailRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerVerifyEmail(requestParameters.verifyEmailDto, options).then((request) => request(this.axios, this.basePath));
    }
}
