/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateProjectDto } from '../models';
// @ts-ignore
import { JoinProjectDto } from '../models';
// @ts-ignore
import { JoinProjectResponseDto } from '../models';
// @ts-ignore
import { MyApplicationsResponseDto } from '../models';
// @ts-ignore
import { MyProjectsResponseDto } from '../models';
// @ts-ignore
import { ProjectApplicationDto } from '../models';
// @ts-ignore
import { ProjectCreateResponseDto } from '../models';
// @ts-ignore
import { ProjectDeleteResponseDto } from '../models';
// @ts-ignore
import { ProjectDetailDto } from '../models';
// @ts-ignore
import { ProjectListResponseDto } from '../models';
// @ts-ignore
import { ProjectMemberDto } from '../models';
// @ts-ignore
import { ProjectStatusUpdateResponseDto } from '../models';
// @ts-ignore
import { ProjectUpdateResponseDto } from '../models';
// @ts-ignore
import { ReactivateProjectMemberResponseDto } from '../models';
// @ts-ignore
import { RemoveProjectMemberResponseDto } from '../models';
// @ts-ignore
import { ReviewApplicationDto } from '../models';
// @ts-ignore
import { ReviewApplicationResponseDto } from '../models';
// @ts-ignore
import { UpdateProjectDto } from '../models';
// @ts-ignore
import { UpdateProjectStatusDto } from '../models';
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export const ProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new project
         * @param {CreateProjectDto} createProjectDto Project creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerCreate: async (createProjectDto: CreateProjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectDto' is not null or undefined
            assertParamExists('projectsCommandControllerCreate', 'createProjectDto', createProjectDto)
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submit an application to join a project for a specific role
         * @summary Apply to join a project
         * @param {JoinProjectDto} joinProjectDto Project join application data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerJoinProject: async (joinProjectDto: JoinProjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'joinProjectDto' is not null or undefined
            assertParamExists('projectsCommandControllerJoinProject', 'joinProjectDto', joinProjectDto)
            const localVarPath = `/api/projects/join`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reactivate a previously removed member back to the project. Only the project owner can reactivate members.
         * @summary Reactivate a removed project member
         * @param {string} slug Project slug
         * @param {string} memberUserSlug Username of the removed member to reactivate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerReactivateProjectMember: async (slug: string, memberUserSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsCommandControllerReactivateProjectMember', 'slug', slug)
            // verify required parameter 'memberUserSlug' is not null or undefined
            assertParamExists('projectsCommandControllerReactivateProjectMember', 'memberUserSlug', memberUserSlug)
            const localVarPath = `/api/projects/{slug}/members/{memberUserSlug}/reactivate`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"memberUserSlug"}}`, encodeURIComponent(String(memberUserSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a project permanently. Only the project owner can delete the project.
         * @summary Delete a project
         * @param {string} slug Project slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerRemove: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsCommandControllerRemove', 'slug', slug)
            const localVarPath = `/api/projects/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a member from a project and free up their role slot. Only the project owner can remove members.
         * @summary Remove a project member
         * @param {string} slug Project slug
         * @param {string} memberUserSlug Username of the member to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerRemoveProjectMember: async (slug: string, memberUserSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsCommandControllerRemoveProjectMember', 'slug', slug)
            // verify required parameter 'memberUserSlug' is not null or undefined
            assertParamExists('projectsCommandControllerRemoveProjectMember', 'memberUserSlug', memberUserSlug)
            const localVarPath = `/api/projects/{slug}/members/{memberUserSlug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)))
                .replace(`{${"memberUserSlug"}}`, encodeURIComponent(String(memberUserSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Approve or reject a project application. Only the project owner can review applications.
         * @summary Review a project application
         * @param {ReviewApplicationDto} reviewApplicationDto Application review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerReviewApplication: async (reviewApplicationDto: ReviewApplicationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reviewApplicationDto' is not null or undefined
            assertParamExists('projectsCommandControllerReviewApplication', 'reviewApplicationDto', reviewApplicationDto)
            const localVarPath = `/api/projects/applications/review`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reviewApplicationDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update project details. Only the project owner can update the project.
         * @summary Update a project
         * @param {string} slug Project slug
         * @param {UpdateProjectDto} updateProjectDto Project update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerUpdate: async (slug: string, updateProjectDto: UpdateProjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsCommandControllerUpdate', 'slug', slug)
            // verify required parameter 'updateProjectDto' is not null or undefined
            assertParamExists('projectsCommandControllerUpdate', 'updateProjectDto', updateProjectDto)
            const localVarPath = `/api/projects/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of a project. Only the project owner can change status.
         * @summary Update project status
         * @param {string} slug Project slug
         * @param {UpdateProjectStatusDto} updateProjectStatusDto Project status update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerUpdateStatus: async (slug: string, updateProjectStatusDto: UpdateProjectStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsCommandControllerUpdateStatus', 'slug', slug)
            // verify required parameter 'updateProjectStatusDto' is not null or undefined
            assertParamExists('projectsCommandControllerUpdateStatus', 'updateProjectStatusDto', updateProjectStatusDto)
            const localVarPath = `/api/projects/{slug}/status`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a paginated list of projects with optional filtering by status, tags, search term, and owner. No authentication required.
         * @summary Get all projects with filtering and pagination
         * @param {'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED'} [status] Filter by project status
         * @param {string} [tags] Comma-separated list of tags to filter by
         * @param {string} [search] Search in project title and description
         * @param {string} [ownerSlug] Filter by project owner username
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'dueDate' | 'title'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerFindAll: async (status?: 'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED', tags?: string, search?: string, ownerSlug?: string, sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'dueDate' | 'title', limit?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (ownerSlug !== undefined) {
                localVarQueryParameter['ownerSlug'] = ownerSlug;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information about a specific project
         * @summary Get a project by slug
         * @param {string} slug Project slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerFindOne: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsQueryControllerFindOne', 'slug', slug)
            const localVarPath = `/api/projects/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all project applications submitted by the current user
         * @summary Get current user applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetMyApplications: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects/my-applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all projects owned by or where the current user is a member
         * @summary Get current user projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetMyProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/projects/my-projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all applications for a specific project, optionally filtered by role
         * @summary Get project applications
         * @param {string} slug Project slug
         * @param {string} [roleSlug] Filter applications by role slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetProjectApplications: async (slug: string, roleSlug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsQueryControllerGetProjectApplications', 'slug', slug)
            const localVarPath = `/api/projects/{slug}/applications`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleSlug !== undefined) {
                localVarQueryParameter['roleSlug'] = roleSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve basic project information without members or applications
         * @summary Get basic project information
         * @param {string} slug Project slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetProjectBasic: async (slug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsQueryControllerGetProjectBasic', 'slug', slug)
            const localVarPath = `/api/projects/{slug}/basic`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all active members for a specific project, optionally filtered by role
         * @summary Get project members
         * @param {string} slug Project slug
         * @param {string} [roleSlug] Filter members by role slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetProjectMembers: async (slug: string, roleSlug?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('projectsQueryControllerGetProjectMembers', 'slug', slug)
            const localVarPath = `/api/projects/{slug}/members`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleSlug !== undefined) {
                localVarQueryParameter['roleSlug'] = roleSlug;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectsApi - functional programming interface
 * @export
 */
export const ProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new project
         * @param {CreateProjectDto} createProjectDto Project creation data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCommandControllerCreate(createProjectDto: CreateProjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectCreateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCommandControllerCreate(createProjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submit an application to join a project for a specific role
         * @summary Apply to join a project
         * @param {JoinProjectDto} joinProjectDto Project join application data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCommandControllerJoinProject(joinProjectDto: JoinProjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JoinProjectResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCommandControllerJoinProject(joinProjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reactivate a previously removed member back to the project. Only the project owner can reactivate members.
         * @summary Reactivate a removed project member
         * @param {string} slug Project slug
         * @param {string} memberUserSlug Username of the removed member to reactivate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCommandControllerReactivateProjectMember(slug: string, memberUserSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReactivateProjectMemberResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCommandControllerReactivateProjectMember(slug, memberUserSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a project permanently. Only the project owner can delete the project.
         * @summary Delete a project
         * @param {string} slug Project slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCommandControllerRemove(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDeleteResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCommandControllerRemove(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a member from a project and free up their role slot. Only the project owner can remove members.
         * @summary Remove a project member
         * @param {string} slug Project slug
         * @param {string} memberUserSlug Username of the member to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCommandControllerRemoveProjectMember(slug: string, memberUserSlug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveProjectMemberResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCommandControllerRemoveProjectMember(slug, memberUserSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Approve or reject a project application. Only the project owner can review applications.
         * @summary Review a project application
         * @param {ReviewApplicationDto} reviewApplicationDto Application review data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCommandControllerReviewApplication(reviewApplicationDto: ReviewApplicationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReviewApplicationResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCommandControllerReviewApplication(reviewApplicationDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update project details. Only the project owner can update the project.
         * @summary Update a project
         * @param {string} slug Project slug
         * @param {UpdateProjectDto} updateProjectDto Project update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCommandControllerUpdate(slug: string, updateProjectDto: UpdateProjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectUpdateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCommandControllerUpdate(slug, updateProjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the status of a project. Only the project owner can change status.
         * @summary Update project status
         * @param {string} slug Project slug
         * @param {UpdateProjectStatusDto} updateProjectStatusDto Project status update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsCommandControllerUpdateStatus(slug: string, updateProjectStatusDto: UpdateProjectStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectStatusUpdateResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsCommandControllerUpdateStatus(slug, updateProjectStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a paginated list of projects with optional filtering by status, tags, search term, and owner. No authentication required.
         * @summary Get all projects with filtering and pagination
         * @param {'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED'} [status] Filter by project status
         * @param {string} [tags] Comma-separated list of tags to filter by
         * @param {string} [search] Search in project title and description
         * @param {string} [ownerSlug] Filter by project owner username
         * @param {'asc' | 'desc'} [sortOrder] Sort direction
         * @param {'createdAt' | 'updatedAt' | 'dueDate' | 'title'} [sortBy] Field to sort by
         * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
         * @param {number} [page] Page number for pagination (minimum: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsQueryControllerFindAll(status?: 'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED', tags?: string, search?: string, ownerSlug?: string, sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'dueDate' | 'title', limit?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsQueryControllerFindAll(status, tags, search, ownerSlug, sortOrder, sortBy, limit, page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve detailed information about a specific project
         * @summary Get a project by slug
         * @param {string} slug Project slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsQueryControllerFindOne(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsQueryControllerFindOne(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all project applications submitted by the current user
         * @summary Get current user applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsQueryControllerGetMyApplications(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyApplicationsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsQueryControllerGetMyApplications(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all projects owned by or where the current user is a member
         * @summary Get current user projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsQueryControllerGetMyProjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MyProjectsResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsQueryControllerGetMyProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all applications for a specific project, optionally filtered by role
         * @summary Get project applications
         * @param {string} slug Project slug
         * @param {string} [roleSlug] Filter applications by role slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsQueryControllerGetProjectApplications(slug: string, roleSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectApplicationDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsQueryControllerGetProjectApplications(slug, roleSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve basic project information without members or applications
         * @summary Get basic project information
         * @param {string} slug Project slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsQueryControllerGetProjectBasic(slug: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDetailDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsQueryControllerGetProjectBasic(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all active members for a specific project, optionally filtered by role
         * @summary Get project members
         * @param {string} slug Project slug
         * @param {string} [roleSlug] Filter members by role slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectsQueryControllerGetProjectMembers(slug: string, roleSlug?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectMemberDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectsQueryControllerGetProjectMembers(slug, roleSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectsApi - factory interface
 * @export
 */
export const ProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new project
         * @param {ProjectsApiProjectsCommandControllerCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerCreate(requestParameters: ProjectsApiProjectsCommandControllerCreateRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectCreateResponseDto> {
            return localVarFp.projectsCommandControllerCreate(requestParameters.createProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Submit an application to join a project for a specific role
         * @summary Apply to join a project
         * @param {ProjectsApiProjectsCommandControllerJoinProjectRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerJoinProject(requestParameters: ProjectsApiProjectsCommandControllerJoinProjectRequest, options?: AxiosRequestConfig): AxiosPromise<JoinProjectResponseDto> {
            return localVarFp.projectsCommandControllerJoinProject(requestParameters.joinProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Reactivate a previously removed member back to the project. Only the project owner can reactivate members.
         * @summary Reactivate a removed project member
         * @param {ProjectsApiProjectsCommandControllerReactivateProjectMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerReactivateProjectMember(requestParameters: ProjectsApiProjectsCommandControllerReactivateProjectMemberRequest, options?: AxiosRequestConfig): AxiosPromise<ReactivateProjectMemberResponseDto> {
            return localVarFp.projectsCommandControllerReactivateProjectMember(requestParameters.slug, requestParameters.memberUserSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a project permanently. Only the project owner can delete the project.
         * @summary Delete a project
         * @param {ProjectsApiProjectsCommandControllerRemoveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerRemove(requestParameters: ProjectsApiProjectsCommandControllerRemoveRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectDeleteResponseDto> {
            return localVarFp.projectsCommandControllerRemove(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a member from a project and free up their role slot. Only the project owner can remove members.
         * @summary Remove a project member
         * @param {ProjectsApiProjectsCommandControllerRemoveProjectMemberRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerRemoveProjectMember(requestParameters: ProjectsApiProjectsCommandControllerRemoveProjectMemberRequest, options?: AxiosRequestConfig): AxiosPromise<RemoveProjectMemberResponseDto> {
            return localVarFp.projectsCommandControllerRemoveProjectMember(requestParameters.slug, requestParameters.memberUserSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Approve or reject a project application. Only the project owner can review applications.
         * @summary Review a project application
         * @param {ProjectsApiProjectsCommandControllerReviewApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerReviewApplication(requestParameters: ProjectsApiProjectsCommandControllerReviewApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<ReviewApplicationResponseDto> {
            return localVarFp.projectsCommandControllerReviewApplication(requestParameters.reviewApplicationDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Update project details. Only the project owner can update the project.
         * @summary Update a project
         * @param {ProjectsApiProjectsCommandControllerUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerUpdate(requestParameters: ProjectsApiProjectsCommandControllerUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectUpdateResponseDto> {
            return localVarFp.projectsCommandControllerUpdate(requestParameters.slug, requestParameters.updateProjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of a project. Only the project owner can change status.
         * @summary Update project status
         * @param {ProjectsApiProjectsCommandControllerUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsCommandControllerUpdateStatus(requestParameters: ProjectsApiProjectsCommandControllerUpdateStatusRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectStatusUpdateResponseDto> {
            return localVarFp.projectsCommandControllerUpdateStatus(requestParameters.slug, requestParameters.updateProjectStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a paginated list of projects with optional filtering by status, tags, search term, and owner. No authentication required.
         * @summary Get all projects with filtering and pagination
         * @param {ProjectsApiProjectsQueryControllerFindAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerFindAll(requestParameters: ProjectsApiProjectsQueryControllerFindAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ProjectListResponseDto> {
            return localVarFp.projectsQueryControllerFindAll(requestParameters.status, requestParameters.tags, requestParameters.search, requestParameters.ownerSlug, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information about a specific project
         * @summary Get a project by slug
         * @param {ProjectsApiProjectsQueryControllerFindOneRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerFindOne(requestParameters: ProjectsApiProjectsQueryControllerFindOneRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectDetailDto> {
            return localVarFp.projectsQueryControllerFindOne(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all project applications submitted by the current user
         * @summary Get current user applications
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetMyApplications(options?: AxiosRequestConfig): AxiosPromise<MyApplicationsResponseDto> {
            return localVarFp.projectsQueryControllerGetMyApplications(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all projects owned by or where the current user is a member
         * @summary Get current user projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetMyProjects(options?: AxiosRequestConfig): AxiosPromise<MyProjectsResponseDto> {
            return localVarFp.projectsQueryControllerGetMyProjects(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all applications for a specific project, optionally filtered by role
         * @summary Get project applications
         * @param {ProjectsApiProjectsQueryControllerGetProjectApplicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetProjectApplications(requestParameters: ProjectsApiProjectsQueryControllerGetProjectApplicationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProjectApplicationDto>> {
            return localVarFp.projectsQueryControllerGetProjectApplications(requestParameters.slug, requestParameters.roleSlug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve basic project information without members or applications
         * @summary Get basic project information
         * @param {ProjectsApiProjectsQueryControllerGetProjectBasicRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetProjectBasic(requestParameters: ProjectsApiProjectsQueryControllerGetProjectBasicRequest, options?: AxiosRequestConfig): AxiosPromise<ProjectDetailDto> {
            return localVarFp.projectsQueryControllerGetProjectBasic(requestParameters.slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all active members for a specific project, optionally filtered by role
         * @summary Get project members
         * @param {ProjectsApiProjectsQueryControllerGetProjectMembersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsQueryControllerGetProjectMembers(requestParameters: ProjectsApiProjectsQueryControllerGetProjectMembersRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProjectMemberDto>> {
            return localVarFp.projectsQueryControllerGetProjectMembers(requestParameters.slug, requestParameters.roleSlug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectsApi - interface
 * @export
 * @interface ProjectsApi
 */
export interface ProjectsApiInterface {
    /**
     * 
     * @summary Create a new project
     * @param {CreateProjectDto} createProjectDto Project creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsCommandControllerCreate(createProjectDto: CreateProjectDto, options?: AxiosRequestConfig): AxiosPromise<ProjectCreateResponseDto>;

    /**
     * Submit an application to join a project for a specific role
     * @summary Apply to join a project
     * @param {JoinProjectDto} joinProjectDto Project join application data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsCommandControllerJoinProject(joinProjectDto: JoinProjectDto, options?: AxiosRequestConfig): AxiosPromise<JoinProjectResponseDto>;

    /**
     * Reactivate a previously removed member back to the project. Only the project owner can reactivate members.
     * @summary Reactivate a removed project member
     * @param {string} slug Project slug
     * @param {string} memberUserSlug Username of the removed member to reactivate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsCommandControllerReactivateProjectMember(slug: string, memberUserSlug: string, options?: AxiosRequestConfig): AxiosPromise<ReactivateProjectMemberResponseDto>;

    /**
     * Delete a project permanently. Only the project owner can delete the project.
     * @summary Delete a project
     * @param {string} slug Project slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsCommandControllerRemove(slug: string, options?: AxiosRequestConfig): AxiosPromise<ProjectDeleteResponseDto>;

    /**
     * Remove a member from a project and free up their role slot. Only the project owner can remove members.
     * @summary Remove a project member
     * @param {string} slug Project slug
     * @param {string} memberUserSlug Username of the member to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsCommandControllerRemoveProjectMember(slug: string, memberUserSlug: string, options?: AxiosRequestConfig): AxiosPromise<RemoveProjectMemberResponseDto>;

    /**
     * Approve or reject a project application. Only the project owner can review applications.
     * @summary Review a project application
     * @param {ReviewApplicationDto} reviewApplicationDto Application review data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsCommandControllerReviewApplication(reviewApplicationDto: ReviewApplicationDto, options?: AxiosRequestConfig): AxiosPromise<ReviewApplicationResponseDto>;

    /**
     * Update project details. Only the project owner can update the project.
     * @summary Update a project
     * @param {string} slug Project slug
     * @param {UpdateProjectDto} updateProjectDto Project update data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsCommandControllerUpdate(slug: string, updateProjectDto: UpdateProjectDto, options?: AxiosRequestConfig): AxiosPromise<ProjectUpdateResponseDto>;

    /**
     * Update the status of a project. Only the project owner can change status.
     * @summary Update project status
     * @param {string} slug Project slug
     * @param {UpdateProjectStatusDto} updateProjectStatusDto Project status update data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsCommandControllerUpdateStatus(slug: string, updateProjectStatusDto: UpdateProjectStatusDto, options?: AxiosRequestConfig): AxiosPromise<ProjectStatusUpdateResponseDto>;

    /**
     * Retrieve a paginated list of projects with optional filtering by status, tags, search term, and owner. No authentication required.
     * @summary Get all projects with filtering and pagination
     * @param {'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED'} [status] Filter by project status
     * @param {string} [tags] Comma-separated list of tags to filter by
     * @param {string} [search] Search in project title and description
     * @param {string} [ownerSlug] Filter by project owner username
     * @param {'asc' | 'desc'} [sortOrder] Sort direction
     * @param {'createdAt' | 'updatedAt' | 'dueDate' | 'title'} [sortBy] Field to sort by
     * @param {number} [limit] Number of items per page (minimum: 1, maximum: 100)
     * @param {number} [page] Page number for pagination (minimum: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsQueryControllerFindAll(status?: 'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED', tags?: string, search?: string, ownerSlug?: string, sortOrder?: 'asc' | 'desc', sortBy?: 'createdAt' | 'updatedAt' | 'dueDate' | 'title', limit?: number, page?: number, options?: AxiosRequestConfig): AxiosPromise<ProjectListResponseDto>;

    /**
     * Retrieve detailed information about a specific project
     * @summary Get a project by slug
     * @param {string} slug Project slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsQueryControllerFindOne(slug: string, options?: AxiosRequestConfig): AxiosPromise<ProjectDetailDto>;

    /**
     * Retrieve all project applications submitted by the current user
     * @summary Get current user applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsQueryControllerGetMyApplications(options?: AxiosRequestConfig): AxiosPromise<MyApplicationsResponseDto>;

    /**
     * Retrieve all projects owned by or where the current user is a member
     * @summary Get current user projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsQueryControllerGetMyProjects(options?: AxiosRequestConfig): AxiosPromise<MyProjectsResponseDto>;

    /**
     * Retrieve all applications for a specific project, optionally filtered by role
     * @summary Get project applications
     * @param {string} slug Project slug
     * @param {string} [roleSlug] Filter applications by role slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsQueryControllerGetProjectApplications(slug: string, roleSlug?: string, options?: AxiosRequestConfig): AxiosPromise<Array<ProjectApplicationDto>>;

    /**
     * Retrieve basic project information without members or applications
     * @summary Get basic project information
     * @param {string} slug Project slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsQueryControllerGetProjectBasic(slug: string, options?: AxiosRequestConfig): AxiosPromise<ProjectDetailDto>;

    /**
     * Retrieve all active members for a specific project, optionally filtered by role
     * @summary Get project members
     * @param {string} slug Project slug
     * @param {string} [roleSlug] Filter members by role slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApiInterface
     */
    projectsQueryControllerGetProjectMembers(slug: string, roleSlug?: string, options?: AxiosRequestConfig): AxiosPromise<Array<ProjectMemberDto>>;

}

/**
 * Request parameters for projectsCommandControllerCreate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCommandControllerCreateRequest
 */
export interface ProjectsApiProjectsCommandControllerCreateRequest {
    /**
     * Project creation data
     * @type {CreateProjectDto}
     * @memberof ProjectsApiProjectsCommandControllerCreate
     */
    readonly createProjectDto: CreateProjectDto
}

/**
 * Request parameters for projectsCommandControllerJoinProject operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCommandControllerJoinProjectRequest
 */
export interface ProjectsApiProjectsCommandControllerJoinProjectRequest {
    /**
     * Project join application data
     * @type {JoinProjectDto}
     * @memberof ProjectsApiProjectsCommandControllerJoinProject
     */
    readonly joinProjectDto: JoinProjectDto
}

/**
 * Request parameters for projectsCommandControllerReactivateProjectMember operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCommandControllerReactivateProjectMemberRequest
 */
export interface ProjectsApiProjectsCommandControllerReactivateProjectMemberRequest {
    /**
     * Project slug
     * @type {string}
     * @memberof ProjectsApiProjectsCommandControllerReactivateProjectMember
     */
    readonly slug: string

    /**
     * Username of the removed member to reactivate
     * @type {string}
     * @memberof ProjectsApiProjectsCommandControllerReactivateProjectMember
     */
    readonly memberUserSlug: string
}

/**
 * Request parameters for projectsCommandControllerRemove operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCommandControllerRemoveRequest
 */
export interface ProjectsApiProjectsCommandControllerRemoveRequest {
    /**
     * Project slug
     * @type {string}
     * @memberof ProjectsApiProjectsCommandControllerRemove
     */
    readonly slug: string
}

/**
 * Request parameters for projectsCommandControllerRemoveProjectMember operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCommandControllerRemoveProjectMemberRequest
 */
export interface ProjectsApiProjectsCommandControllerRemoveProjectMemberRequest {
    /**
     * Project slug
     * @type {string}
     * @memberof ProjectsApiProjectsCommandControllerRemoveProjectMember
     */
    readonly slug: string

    /**
     * Username of the member to remove
     * @type {string}
     * @memberof ProjectsApiProjectsCommandControllerRemoveProjectMember
     */
    readonly memberUserSlug: string
}

/**
 * Request parameters for projectsCommandControllerReviewApplication operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCommandControllerReviewApplicationRequest
 */
export interface ProjectsApiProjectsCommandControllerReviewApplicationRequest {
    /**
     * Application review data
     * @type {ReviewApplicationDto}
     * @memberof ProjectsApiProjectsCommandControllerReviewApplication
     */
    readonly reviewApplicationDto: ReviewApplicationDto
}

/**
 * Request parameters for projectsCommandControllerUpdate operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCommandControllerUpdateRequest
 */
export interface ProjectsApiProjectsCommandControllerUpdateRequest {
    /**
     * Project slug
     * @type {string}
     * @memberof ProjectsApiProjectsCommandControllerUpdate
     */
    readonly slug: string

    /**
     * Project update data
     * @type {UpdateProjectDto}
     * @memberof ProjectsApiProjectsCommandControllerUpdate
     */
    readonly updateProjectDto: UpdateProjectDto
}

/**
 * Request parameters for projectsCommandControllerUpdateStatus operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsCommandControllerUpdateStatusRequest
 */
export interface ProjectsApiProjectsCommandControllerUpdateStatusRequest {
    /**
     * Project slug
     * @type {string}
     * @memberof ProjectsApiProjectsCommandControllerUpdateStatus
     */
    readonly slug: string

    /**
     * Project status update data
     * @type {UpdateProjectStatusDto}
     * @memberof ProjectsApiProjectsCommandControllerUpdateStatus
     */
    readonly updateProjectStatusDto: UpdateProjectStatusDto
}

/**
 * Request parameters for projectsQueryControllerFindAll operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsQueryControllerFindAllRequest
 */
export interface ProjectsApiProjectsQueryControllerFindAllRequest {
    /**
     * Filter by project status
     * @type {'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED'}
     * @memberof ProjectsApiProjectsQueryControllerFindAll
     */
    readonly status?: 'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELLED'

    /**
     * Comma-separated list of tags to filter by
     * @type {string}
     * @memberof ProjectsApiProjectsQueryControllerFindAll
     */
    readonly tags?: string

    /**
     * Search in project title and description
     * @type {string}
     * @memberof ProjectsApiProjectsQueryControllerFindAll
     */
    readonly search?: string

    /**
     * Filter by project owner username
     * @type {string}
     * @memberof ProjectsApiProjectsQueryControllerFindAll
     */
    readonly ownerSlug?: string

    /**
     * Sort direction
     * @type {'asc' | 'desc'}
     * @memberof ProjectsApiProjectsQueryControllerFindAll
     */
    readonly sortOrder?: 'asc' | 'desc'

    /**
     * Field to sort by
     * @type {'createdAt' | 'updatedAt' | 'dueDate' | 'title'}
     * @memberof ProjectsApiProjectsQueryControllerFindAll
     */
    readonly sortBy?: 'createdAt' | 'updatedAt' | 'dueDate' | 'title'

    /**
     * Number of items per page (minimum: 1, maximum: 100)
     * @type {number}
     * @memberof ProjectsApiProjectsQueryControllerFindAll
     */
    readonly limit?: number

    /**
     * Page number for pagination (minimum: 1)
     * @type {number}
     * @memberof ProjectsApiProjectsQueryControllerFindAll
     */
    readonly page?: number
}

/**
 * Request parameters for projectsQueryControllerFindOne operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsQueryControllerFindOneRequest
 */
export interface ProjectsApiProjectsQueryControllerFindOneRequest {
    /**
     * Project slug
     * @type {string}
     * @memberof ProjectsApiProjectsQueryControllerFindOne
     */
    readonly slug: string
}

/**
 * Request parameters for projectsQueryControllerGetProjectApplications operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsQueryControllerGetProjectApplicationsRequest
 */
export interface ProjectsApiProjectsQueryControllerGetProjectApplicationsRequest {
    /**
     * Project slug
     * @type {string}
     * @memberof ProjectsApiProjectsQueryControllerGetProjectApplications
     */
    readonly slug: string

    /**
     * Filter applications by role slug
     * @type {string}
     * @memberof ProjectsApiProjectsQueryControllerGetProjectApplications
     */
    readonly roleSlug?: string
}

/**
 * Request parameters for projectsQueryControllerGetProjectBasic operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsQueryControllerGetProjectBasicRequest
 */
export interface ProjectsApiProjectsQueryControllerGetProjectBasicRequest {
    /**
     * Project slug
     * @type {string}
     * @memberof ProjectsApiProjectsQueryControllerGetProjectBasic
     */
    readonly slug: string
}

/**
 * Request parameters for projectsQueryControllerGetProjectMembers operation in ProjectsApi.
 * @export
 * @interface ProjectsApiProjectsQueryControllerGetProjectMembersRequest
 */
export interface ProjectsApiProjectsQueryControllerGetProjectMembersRequest {
    /**
     * Project slug
     * @type {string}
     * @memberof ProjectsApiProjectsQueryControllerGetProjectMembers
     */
    readonly slug: string

    /**
     * Filter members by role slug
     * @type {string}
     * @memberof ProjectsApiProjectsQueryControllerGetProjectMembers
     */
    readonly roleSlug?: string
}

/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export class ProjectsApi extends BaseAPI implements ProjectsApiInterface {
    /**
     * 
     * @summary Create a new project
     * @param {ProjectsApiProjectsCommandControllerCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCommandControllerCreate(requestParameters: ProjectsApiProjectsCommandControllerCreateRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCommandControllerCreate(requestParameters.createProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submit an application to join a project for a specific role
     * @summary Apply to join a project
     * @param {ProjectsApiProjectsCommandControllerJoinProjectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCommandControllerJoinProject(requestParameters: ProjectsApiProjectsCommandControllerJoinProjectRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCommandControllerJoinProject(requestParameters.joinProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reactivate a previously removed member back to the project. Only the project owner can reactivate members.
     * @summary Reactivate a removed project member
     * @param {ProjectsApiProjectsCommandControllerReactivateProjectMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCommandControllerReactivateProjectMember(requestParameters: ProjectsApiProjectsCommandControllerReactivateProjectMemberRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCommandControllerReactivateProjectMember(requestParameters.slug, requestParameters.memberUserSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a project permanently. Only the project owner can delete the project.
     * @summary Delete a project
     * @param {ProjectsApiProjectsCommandControllerRemoveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCommandControllerRemove(requestParameters: ProjectsApiProjectsCommandControllerRemoveRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCommandControllerRemove(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a member from a project and free up their role slot. Only the project owner can remove members.
     * @summary Remove a project member
     * @param {ProjectsApiProjectsCommandControllerRemoveProjectMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCommandControllerRemoveProjectMember(requestParameters: ProjectsApiProjectsCommandControllerRemoveProjectMemberRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCommandControllerRemoveProjectMember(requestParameters.slug, requestParameters.memberUserSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Approve or reject a project application. Only the project owner can review applications.
     * @summary Review a project application
     * @param {ProjectsApiProjectsCommandControllerReviewApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCommandControllerReviewApplication(requestParameters: ProjectsApiProjectsCommandControllerReviewApplicationRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCommandControllerReviewApplication(requestParameters.reviewApplicationDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update project details. Only the project owner can update the project.
     * @summary Update a project
     * @param {ProjectsApiProjectsCommandControllerUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCommandControllerUpdate(requestParameters: ProjectsApiProjectsCommandControllerUpdateRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCommandControllerUpdate(requestParameters.slug, requestParameters.updateProjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the status of a project. Only the project owner can change status.
     * @summary Update project status
     * @param {ProjectsApiProjectsCommandControllerUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsCommandControllerUpdateStatus(requestParameters: ProjectsApiProjectsCommandControllerUpdateStatusRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsCommandControllerUpdateStatus(requestParameters.slug, requestParameters.updateProjectStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a paginated list of projects with optional filtering by status, tags, search term, and owner. No authentication required.
     * @summary Get all projects with filtering and pagination
     * @param {ProjectsApiProjectsQueryControllerFindAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsQueryControllerFindAll(requestParameters: ProjectsApiProjectsQueryControllerFindAllRequest = {}, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsQueryControllerFindAll(requestParameters.status, requestParameters.tags, requestParameters.search, requestParameters.ownerSlug, requestParameters.sortOrder, requestParameters.sortBy, requestParameters.limit, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve detailed information about a specific project
     * @summary Get a project by slug
     * @param {ProjectsApiProjectsQueryControllerFindOneRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsQueryControllerFindOne(requestParameters: ProjectsApiProjectsQueryControllerFindOneRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsQueryControllerFindOne(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all project applications submitted by the current user
     * @summary Get current user applications
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsQueryControllerGetMyApplications(options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsQueryControllerGetMyApplications(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all projects owned by or where the current user is a member
     * @summary Get current user projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsQueryControllerGetMyProjects(options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsQueryControllerGetMyProjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all applications for a specific project, optionally filtered by role
     * @summary Get project applications
     * @param {ProjectsApiProjectsQueryControllerGetProjectApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsQueryControllerGetProjectApplications(requestParameters: ProjectsApiProjectsQueryControllerGetProjectApplicationsRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsQueryControllerGetProjectApplications(requestParameters.slug, requestParameters.roleSlug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve basic project information without members or applications
     * @summary Get basic project information
     * @param {ProjectsApiProjectsQueryControllerGetProjectBasicRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsQueryControllerGetProjectBasic(requestParameters: ProjectsApiProjectsQueryControllerGetProjectBasicRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsQueryControllerGetProjectBasic(requestParameters.slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all active members for a specific project, optionally filtered by role
     * @summary Get project members
     * @param {ProjectsApiProjectsQueryControllerGetProjectMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    public projectsQueryControllerGetProjectMembers(requestParameters: ProjectsApiProjectsQueryControllerGetProjectMembersRequest, options?: AxiosRequestConfig) {
        return ProjectsApiFp(this.configuration).projectsQueryControllerGetProjectMembers(requestParameters.slug, requestParameters.roleSlug, options).then((request) => request(this.axios, this.basePath));
    }
}
