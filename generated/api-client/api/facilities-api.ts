// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Authentication API
 * A comprehensive NestJS authentication API with PostgreSQL & Prisma.  ### Features - JWT Authentication with Access & Refresh tokens - Google OAuth2 integration - Local authentication (email/password) - Cookie-based token storage - Protected routes with guards  ### Authentication This API uses JWT tokens stored in HTTP-only cookies for authentication.  1. Local Authentication 2. Google OAuth
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateFacilityDto } from '../models';
// @ts-ignore
import { FacilitiesControllerGetFacilityUsageHistory200Response } from '../models';
// @ts-ignore
import { FacilityResponseDto } from '../models';
// @ts-ignore
import { FacilityToggleDto } from '../models';
// @ts-ignore
import { FacilityToggleResponseDto } from '../models';
// @ts-ignore
import { FacilityUsageResponseDto } from '../models';
// @ts-ignore
import { FacilityUsageStatusDto } from '../models';
// @ts-ignore
import { FacilityUsageStatusResponseDto } from '../models';
// @ts-ignore
import { UpdateFacilityDto } from '../models';
/**
 * FacilitiesApi - axios parameter creator
 * @export
 */
export const FacilitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *        Creates a new facility for student use.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility name is unique       2. Creates facility with provided details       3. Sets default values for optional fields       4. Returns created facility information              ## Facility Management:       - Facilities can have capacity limits       - Facilities can be temporarily deactivated       - Facilities support location and description metadata     
         * @summary Create a new facility (staff/admin only)
         * @param {CreateFacilityDto} createFacilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerCreateFacility: async (createFacilityDto: CreateFacilityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFacilityDto' is not null or undefined
            assertParamExists('facilitiesControllerCreateFacility', 'createFacilityDto', createFacilityDto)
            const localVarPath = `/api/facilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFacilityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Soft deletes a facility by setting isActive to false.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for active sessions (prevents deletion if students are still checked in)       3. Sets facility as inactive instead of hard deletion       4. Preserves historical data              ## Safety Features:       - Cannot delete facility with active sessions       - Soft delete preserves usage history       - Can be reactivated later if needed     
         * @summary Delete facility (staff/admin only)
         * @param {string} id Facility ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerDeleteFacility: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('facilitiesControllerDeleteFacility', 'id', id)
            const localVarPath = `/api/facilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Retrieves all currently active sessions for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns all active sessions for the facility       2. Includes student information for each session       3. Sorted by time-in timestamp              ## Use Cases:       - Real-time occupancy monitoring       - Emergency evacuation procedures       - Facility management       - Usage analytics     
         * @summary Get active sessions for facility (staff/admin only)
         * @param {string} id Facility ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetActiveSessions: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('facilitiesControllerGetActiveSessions', 'id', id)
            const localVarPath = `/api/facilities/{id}/active-sessions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Retrieves all active facilities available for student use.              ## How it works:       1. Returns all facilities where isActive is true       2. Includes current occupancy count for each facility       3. Sorted alphabetically by facility name              ## Public Access:       This endpoint is public and does not require authentication.       Students can view available facilities before timing in.     
         * @summary Get all active facilities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetFacilities: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/facilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Retrieves detailed information about a specific facility.              ## How it works:       1. Returns facility details including current occupancy       2. Includes all facility metadata       3. Shows real-time occupancy status              ## Public Access:       This endpoint is public and does not require authentication.     
         * @summary Get facility by ID
         * @param {string} id Facility ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetFacility: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('facilitiesControllerGetFacility', 'id', id)
            const localVarPath = `/api/facilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Retrieves paginated usage history for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns paginated usage history       2. Includes both active and completed sessions       3. Sorted by time-in timestamp (newest first)       4. Supports pagination for large datasets              ## Use Cases:       - Usage analytics and reporting       - Historical data analysis       - Audit trails       - Performance monitoring     
         * @summary Get facility usage history (staff/admin only)
         * @param {string} id Facility ID
         * @param {number} [page] Page number (default: 1)
         * @param {number} [limit] Records per page (default: 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetFacilityUsageHistory: async (id: string, page?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('facilitiesControllerGetFacilityUsageHistory', 'id', id)
            const localVarPath = `/api/facilities/{id}/usage-history`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Checks if a student is currently checked in to a specific facility.              ## How it works:       1. Validates RFID card is registered       2. Looks for active session in the specified facility       3. Returns current status and session details              ## Requirements:       - RFID card must be registered to a student              ## Use Cases:       - Status verification at facility entrance       - Integration with access control systems       - Monitoring and reporting       - Troubleshooting check-in issues     
         * @summary Check facility usage status using RFID
         * @param {FacilityUsageStatusDto} facilityUsageStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetUsageStatus: async (facilityUsageStatusDto: FacilityUsageStatusDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityUsageStatusDto' is not null or undefined
            assertParamExists('facilitiesControllerGetUsageStatus', 'facilityUsageStatusDto', facilityUsageStatusDto)
            const localVarPath = `/api/facilities/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityUsageStatusDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Smart endpoint that automatically handles both time-in and time-out based on current status.              ## How it works:       1. Validates RFID card is registered and email is verified       2. Checks if facility exists and is active       3. Automatically detects student\'s current facility status:          - If not in any facility: performs time-in          - If in the same facility: performs time-out          - If in different facility: returns error (must time-out first)       4. Updates user\'s current facility tracking       5. Returns action performed and session information              ## Requirements:       - RFID card must be registered to a student       - Student email must be verified       - Facility must be active       - For time-in: facility must have available capacity       - For time-out: student must have active session              ## Use Cases:       - Single RFID reader at facility entrance/exit       - Automatic time-in/time-out detection       - Simplified integration for RFID hardware       - Prevents double check-ins       - Real-time facility occupancy tracking     
         * @summary Toggle facility access using RFID
         * @param {FacilityToggleDto} facilityToggleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerToggleFacilityAccess: async (facilityToggleDto: FacilityToggleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facilityToggleDto' is not null or undefined
            assertParamExists('facilitiesControllerToggleFacilityAccess', 'facilityToggleDto', facilityToggleDto)
            const localVarPath = `/api/facilities/toggle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(facilityToggleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *        Updates an existing facility\'s information.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for name conflicts if name is being updated       3. Updates facility with provided changes       4. Returns updated facility information     
         * @summary Update facility (staff/admin only)
         * @param {string} id Facility ID
         * @param {UpdateFacilityDto} updateFacilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerUpdateFacility: async (id: string, updateFacilityDto: UpdateFacilityDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('facilitiesControllerUpdateFacility', 'id', id)
            // verify required parameter 'updateFacilityDto' is not null or undefined
            assertParamExists('facilitiesControllerUpdateFacility', 'updateFacilityDto', updateFacilityDto)
            const localVarPath = `/api/facilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateFacilityDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FacilitiesApi - functional programming interface
 * @export
 */
export const FacilitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FacilitiesApiAxiosParamCreator(configuration)
    return {
        /**
         *        Creates a new facility for student use.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility name is unique       2. Creates facility with provided details       3. Sets default values for optional fields       4. Returns created facility information              ## Facility Management:       - Facilities can have capacity limits       - Facilities can be temporarily deactivated       - Facilities support location and description metadata     
         * @summary Create a new facility (staff/admin only)
         * @param {CreateFacilityDto} createFacilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facilitiesControllerCreateFacility(createFacilityDto: CreateFacilityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FacilityResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facilitiesControllerCreateFacility(createFacilityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Soft deletes a facility by setting isActive to false.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for active sessions (prevents deletion if students are still checked in)       3. Sets facility as inactive instead of hard deletion       4. Preserves historical data              ## Safety Features:       - Cannot delete facility with active sessions       - Soft delete preserves usage history       - Can be reactivated later if needed     
         * @summary Delete facility (staff/admin only)
         * @param {string} id Facility ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facilitiesControllerDeleteFacility(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facilitiesControllerDeleteFacility(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Retrieves all currently active sessions for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns all active sessions for the facility       2. Includes student information for each session       3. Sorted by time-in timestamp              ## Use Cases:       - Real-time occupancy monitoring       - Emergency evacuation procedures       - Facility management       - Usage analytics     
         * @summary Get active sessions for facility (staff/admin only)
         * @param {string} id Facility ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facilitiesControllerGetActiveSessions(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FacilityUsageResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facilitiesControllerGetActiveSessions(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Retrieves all active facilities available for student use.              ## How it works:       1. Returns all facilities where isActive is true       2. Includes current occupancy count for each facility       3. Sorted alphabetically by facility name              ## Public Access:       This endpoint is public and does not require authentication.       Students can view available facilities before timing in.     
         * @summary Get all active facilities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facilitiesControllerGetFacilities(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FacilityResponseDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facilitiesControllerGetFacilities(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Retrieves detailed information about a specific facility.              ## How it works:       1. Returns facility details including current occupancy       2. Includes all facility metadata       3. Shows real-time occupancy status              ## Public Access:       This endpoint is public and does not require authentication.     
         * @summary Get facility by ID
         * @param {string} id Facility ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facilitiesControllerGetFacility(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FacilityResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facilitiesControllerGetFacility(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Retrieves paginated usage history for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns paginated usage history       2. Includes both active and completed sessions       3. Sorted by time-in timestamp (newest first)       4. Supports pagination for large datasets              ## Use Cases:       - Usage analytics and reporting       - Historical data analysis       - Audit trails       - Performance monitoring     
         * @summary Get facility usage history (staff/admin only)
         * @param {string} id Facility ID
         * @param {number} [page] Page number (default: 1)
         * @param {number} [limit] Records per page (default: 20)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facilitiesControllerGetFacilityUsageHistory(id: string, page?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FacilitiesControllerGetFacilityUsageHistory200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facilitiesControllerGetFacilityUsageHistory(id, page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Checks if a student is currently checked in to a specific facility.              ## How it works:       1. Validates RFID card is registered       2. Looks for active session in the specified facility       3. Returns current status and session details              ## Requirements:       - RFID card must be registered to a student              ## Use Cases:       - Status verification at facility entrance       - Integration with access control systems       - Monitoring and reporting       - Troubleshooting check-in issues     
         * @summary Check facility usage status using RFID
         * @param {FacilityUsageStatusDto} facilityUsageStatusDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facilitiesControllerGetUsageStatus(facilityUsageStatusDto: FacilityUsageStatusDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FacilityUsageStatusResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facilitiesControllerGetUsageStatus(facilityUsageStatusDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Smart endpoint that automatically handles both time-in and time-out based on current status.              ## How it works:       1. Validates RFID card is registered and email is verified       2. Checks if facility exists and is active       3. Automatically detects student\'s current facility status:          - If not in any facility: performs time-in          - If in the same facility: performs time-out          - If in different facility: returns error (must time-out first)       4. Updates user\'s current facility tracking       5. Returns action performed and session information              ## Requirements:       - RFID card must be registered to a student       - Student email must be verified       - Facility must be active       - For time-in: facility must have available capacity       - For time-out: student must have active session              ## Use Cases:       - Single RFID reader at facility entrance/exit       - Automatic time-in/time-out detection       - Simplified integration for RFID hardware       - Prevents double check-ins       - Real-time facility occupancy tracking     
         * @summary Toggle facility access using RFID
         * @param {FacilityToggleDto} facilityToggleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facilitiesControllerToggleFacilityAccess(facilityToggleDto: FacilityToggleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FacilityToggleResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facilitiesControllerToggleFacilityAccess(facilityToggleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *        Updates an existing facility\'s information.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for name conflicts if name is being updated       3. Updates facility with provided changes       4. Returns updated facility information     
         * @summary Update facility (staff/admin only)
         * @param {string} id Facility ID
         * @param {UpdateFacilityDto} updateFacilityDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facilitiesControllerUpdateFacility(id: string, updateFacilityDto: UpdateFacilityDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FacilityResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facilitiesControllerUpdateFacility(id, updateFacilityDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FacilitiesApi - factory interface
 * @export
 */
export const FacilitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FacilitiesApiFp(configuration)
    return {
        /**
         *        Creates a new facility for student use.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility name is unique       2. Creates facility with provided details       3. Sets default values for optional fields       4. Returns created facility information              ## Facility Management:       - Facilities can have capacity limits       - Facilities can be temporarily deactivated       - Facilities support location and description metadata     
         * @summary Create a new facility (staff/admin only)
         * @param {FacilitiesApiFacilitiesControllerCreateFacilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerCreateFacility(requestParameters: FacilitiesApiFacilitiesControllerCreateFacilityRequest, options?: AxiosRequestConfig): AxiosPromise<FacilityResponseDto> {
            return localVarFp.facilitiesControllerCreateFacility(requestParameters.createFacilityDto, options).then((request) => request(axios, basePath));
        },
        /**
         *        Soft deletes a facility by setting isActive to false.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for active sessions (prevents deletion if students are still checked in)       3. Sets facility as inactive instead of hard deletion       4. Preserves historical data              ## Safety Features:       - Cannot delete facility with active sessions       - Soft delete preserves usage history       - Can be reactivated later if needed     
         * @summary Delete facility (staff/admin only)
         * @param {FacilitiesApiFacilitiesControllerDeleteFacilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerDeleteFacility(requestParameters: FacilitiesApiFacilitiesControllerDeleteFacilityRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.facilitiesControllerDeleteFacility(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *        Retrieves all currently active sessions for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns all active sessions for the facility       2. Includes student information for each session       3. Sorted by time-in timestamp              ## Use Cases:       - Real-time occupancy monitoring       - Emergency evacuation procedures       - Facility management       - Usage analytics     
         * @summary Get active sessions for facility (staff/admin only)
         * @param {FacilitiesApiFacilitiesControllerGetActiveSessionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetActiveSessions(requestParameters: FacilitiesApiFacilitiesControllerGetActiveSessionsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<FacilityUsageResponseDto>> {
            return localVarFp.facilitiesControllerGetActiveSessions(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *        Retrieves all active facilities available for student use.              ## How it works:       1. Returns all facilities where isActive is true       2. Includes current occupancy count for each facility       3. Sorted alphabetically by facility name              ## Public Access:       This endpoint is public and does not require authentication.       Students can view available facilities before timing in.     
         * @summary Get all active facilities
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetFacilities(options?: AxiosRequestConfig): AxiosPromise<Array<FacilityResponseDto>> {
            return localVarFp.facilitiesControllerGetFacilities(options).then((request) => request(axios, basePath));
        },
        /**
         *        Retrieves detailed information about a specific facility.              ## How it works:       1. Returns facility details including current occupancy       2. Includes all facility metadata       3. Shows real-time occupancy status              ## Public Access:       This endpoint is public and does not require authentication.     
         * @summary Get facility by ID
         * @param {FacilitiesApiFacilitiesControllerGetFacilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetFacility(requestParameters: FacilitiesApiFacilitiesControllerGetFacilityRequest, options?: AxiosRequestConfig): AxiosPromise<FacilityResponseDto> {
            return localVarFp.facilitiesControllerGetFacility(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         *        Retrieves paginated usage history for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns paginated usage history       2. Includes both active and completed sessions       3. Sorted by time-in timestamp (newest first)       4. Supports pagination for large datasets              ## Use Cases:       - Usage analytics and reporting       - Historical data analysis       - Audit trails       - Performance monitoring     
         * @summary Get facility usage history (staff/admin only)
         * @param {FacilitiesApiFacilitiesControllerGetFacilityUsageHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetFacilityUsageHistory(requestParameters: FacilitiesApiFacilitiesControllerGetFacilityUsageHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<FacilitiesControllerGetFacilityUsageHistory200Response> {
            return localVarFp.facilitiesControllerGetFacilityUsageHistory(requestParameters.id, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         *        Checks if a student is currently checked in to a specific facility.              ## How it works:       1. Validates RFID card is registered       2. Looks for active session in the specified facility       3. Returns current status and session details              ## Requirements:       - RFID card must be registered to a student              ## Use Cases:       - Status verification at facility entrance       - Integration with access control systems       - Monitoring and reporting       - Troubleshooting check-in issues     
         * @summary Check facility usage status using RFID
         * @param {FacilitiesApiFacilitiesControllerGetUsageStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerGetUsageStatus(requestParameters: FacilitiesApiFacilitiesControllerGetUsageStatusRequest, options?: AxiosRequestConfig): AxiosPromise<FacilityUsageStatusResponseDto> {
            return localVarFp.facilitiesControllerGetUsageStatus(requestParameters.facilityUsageStatusDto, options).then((request) => request(axios, basePath));
        },
        /**
         *        Smart endpoint that automatically handles both time-in and time-out based on current status.              ## How it works:       1. Validates RFID card is registered and email is verified       2. Checks if facility exists and is active       3. Automatically detects student\'s current facility status:          - If not in any facility: performs time-in          - If in the same facility: performs time-out          - If in different facility: returns error (must time-out first)       4. Updates user\'s current facility tracking       5. Returns action performed and session information              ## Requirements:       - RFID card must be registered to a student       - Student email must be verified       - Facility must be active       - For time-in: facility must have available capacity       - For time-out: student must have active session              ## Use Cases:       - Single RFID reader at facility entrance/exit       - Automatic time-in/time-out detection       - Simplified integration for RFID hardware       - Prevents double check-ins       - Real-time facility occupancy tracking     
         * @summary Toggle facility access using RFID
         * @param {FacilitiesApiFacilitiesControllerToggleFacilityAccessRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerToggleFacilityAccess(requestParameters: FacilitiesApiFacilitiesControllerToggleFacilityAccessRequest, options?: AxiosRequestConfig): AxiosPromise<FacilityToggleResponseDto> {
            return localVarFp.facilitiesControllerToggleFacilityAccess(requestParameters.facilityToggleDto, options).then((request) => request(axios, basePath));
        },
        /**
         *        Updates an existing facility\'s information.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for name conflicts if name is being updated       3. Updates facility with provided changes       4. Returns updated facility information     
         * @summary Update facility (staff/admin only)
         * @param {FacilitiesApiFacilitiesControllerUpdateFacilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facilitiesControllerUpdateFacility(requestParameters: FacilitiesApiFacilitiesControllerUpdateFacilityRequest, options?: AxiosRequestConfig): AxiosPromise<FacilityResponseDto> {
            return localVarFp.facilitiesControllerUpdateFacility(requestParameters.id, requestParameters.updateFacilityDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FacilitiesApi - interface
 * @export
 * @interface FacilitiesApi
 */
export interface FacilitiesApiInterface {
    /**
     *        Creates a new facility for student use.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility name is unique       2. Creates facility with provided details       3. Sets default values for optional fields       4. Returns created facility information              ## Facility Management:       - Facilities can have capacity limits       - Facilities can be temporarily deactivated       - Facilities support location and description metadata     
     * @summary Create a new facility (staff/admin only)
     * @param {CreateFacilityDto} createFacilityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApiInterface
     */
    facilitiesControllerCreateFacility(createFacilityDto: CreateFacilityDto, options?: AxiosRequestConfig): AxiosPromise<FacilityResponseDto>;

    /**
     *        Soft deletes a facility by setting isActive to false.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for active sessions (prevents deletion if students are still checked in)       3. Sets facility as inactive instead of hard deletion       4. Preserves historical data              ## Safety Features:       - Cannot delete facility with active sessions       - Soft delete preserves usage history       - Can be reactivated later if needed     
     * @summary Delete facility (staff/admin only)
     * @param {string} id Facility ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApiInterface
     */
    facilitiesControllerDeleteFacility(id: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     *        Retrieves all currently active sessions for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns all active sessions for the facility       2. Includes student information for each session       3. Sorted by time-in timestamp              ## Use Cases:       - Real-time occupancy monitoring       - Emergency evacuation procedures       - Facility management       - Usage analytics     
     * @summary Get active sessions for facility (staff/admin only)
     * @param {string} id Facility ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApiInterface
     */
    facilitiesControllerGetActiveSessions(id: string, options?: AxiosRequestConfig): AxiosPromise<Array<FacilityUsageResponseDto>>;

    /**
     *        Retrieves all active facilities available for student use.              ## How it works:       1. Returns all facilities where isActive is true       2. Includes current occupancy count for each facility       3. Sorted alphabetically by facility name              ## Public Access:       This endpoint is public and does not require authentication.       Students can view available facilities before timing in.     
     * @summary Get all active facilities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApiInterface
     */
    facilitiesControllerGetFacilities(options?: AxiosRequestConfig): AxiosPromise<Array<FacilityResponseDto>>;

    /**
     *        Retrieves detailed information about a specific facility.              ## How it works:       1. Returns facility details including current occupancy       2. Includes all facility metadata       3. Shows real-time occupancy status              ## Public Access:       This endpoint is public and does not require authentication.     
     * @summary Get facility by ID
     * @param {string} id Facility ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApiInterface
     */
    facilitiesControllerGetFacility(id: string, options?: AxiosRequestConfig): AxiosPromise<FacilityResponseDto>;

    /**
     *        Retrieves paginated usage history for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns paginated usage history       2. Includes both active and completed sessions       3. Sorted by time-in timestamp (newest first)       4. Supports pagination for large datasets              ## Use Cases:       - Usage analytics and reporting       - Historical data analysis       - Audit trails       - Performance monitoring     
     * @summary Get facility usage history (staff/admin only)
     * @param {string} id Facility ID
     * @param {number} [page] Page number (default: 1)
     * @param {number} [limit] Records per page (default: 20)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApiInterface
     */
    facilitiesControllerGetFacilityUsageHistory(id: string, page?: number, limit?: number, options?: AxiosRequestConfig): AxiosPromise<FacilitiesControllerGetFacilityUsageHistory200Response>;

    /**
     *        Checks if a student is currently checked in to a specific facility.              ## How it works:       1. Validates RFID card is registered       2. Looks for active session in the specified facility       3. Returns current status and session details              ## Requirements:       - RFID card must be registered to a student              ## Use Cases:       - Status verification at facility entrance       - Integration with access control systems       - Monitoring and reporting       - Troubleshooting check-in issues     
     * @summary Check facility usage status using RFID
     * @param {FacilityUsageStatusDto} facilityUsageStatusDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApiInterface
     */
    facilitiesControllerGetUsageStatus(facilityUsageStatusDto: FacilityUsageStatusDto, options?: AxiosRequestConfig): AxiosPromise<FacilityUsageStatusResponseDto>;

    /**
     *        Smart endpoint that automatically handles both time-in and time-out based on current status.              ## How it works:       1. Validates RFID card is registered and email is verified       2. Checks if facility exists and is active       3. Automatically detects student\'s current facility status:          - If not in any facility: performs time-in          - If in the same facility: performs time-out          - If in different facility: returns error (must time-out first)       4. Updates user\'s current facility tracking       5. Returns action performed and session information              ## Requirements:       - RFID card must be registered to a student       - Student email must be verified       - Facility must be active       - For time-in: facility must have available capacity       - For time-out: student must have active session              ## Use Cases:       - Single RFID reader at facility entrance/exit       - Automatic time-in/time-out detection       - Simplified integration for RFID hardware       - Prevents double check-ins       - Real-time facility occupancy tracking     
     * @summary Toggle facility access using RFID
     * @param {FacilityToggleDto} facilityToggleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApiInterface
     */
    facilitiesControllerToggleFacilityAccess(facilityToggleDto: FacilityToggleDto, options?: AxiosRequestConfig): AxiosPromise<FacilityToggleResponseDto>;

    /**
     *        Updates an existing facility\'s information.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for name conflicts if name is being updated       3. Updates facility with provided changes       4. Returns updated facility information     
     * @summary Update facility (staff/admin only)
     * @param {string} id Facility ID
     * @param {UpdateFacilityDto} updateFacilityDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApiInterface
     */
    facilitiesControllerUpdateFacility(id: string, updateFacilityDto: UpdateFacilityDto, options?: AxiosRequestConfig): AxiosPromise<FacilityResponseDto>;

}

/**
 * Request parameters for facilitiesControllerCreateFacility operation in FacilitiesApi.
 * @export
 * @interface FacilitiesApiFacilitiesControllerCreateFacilityRequest
 */
export interface FacilitiesApiFacilitiesControllerCreateFacilityRequest {
    /**
     * 
     * @type {CreateFacilityDto}
     * @memberof FacilitiesApiFacilitiesControllerCreateFacility
     */
    readonly createFacilityDto: CreateFacilityDto
}

/**
 * Request parameters for facilitiesControllerDeleteFacility operation in FacilitiesApi.
 * @export
 * @interface FacilitiesApiFacilitiesControllerDeleteFacilityRequest
 */
export interface FacilitiesApiFacilitiesControllerDeleteFacilityRequest {
    /**
     * Facility ID
     * @type {string}
     * @memberof FacilitiesApiFacilitiesControllerDeleteFacility
     */
    readonly id: string
}

/**
 * Request parameters for facilitiesControllerGetActiveSessions operation in FacilitiesApi.
 * @export
 * @interface FacilitiesApiFacilitiesControllerGetActiveSessionsRequest
 */
export interface FacilitiesApiFacilitiesControllerGetActiveSessionsRequest {
    /**
     * Facility ID
     * @type {string}
     * @memberof FacilitiesApiFacilitiesControllerGetActiveSessions
     */
    readonly id: string
}

/**
 * Request parameters for facilitiesControllerGetFacility operation in FacilitiesApi.
 * @export
 * @interface FacilitiesApiFacilitiesControllerGetFacilityRequest
 */
export interface FacilitiesApiFacilitiesControllerGetFacilityRequest {
    /**
     * Facility ID
     * @type {string}
     * @memberof FacilitiesApiFacilitiesControllerGetFacility
     */
    readonly id: string
}

/**
 * Request parameters for facilitiesControllerGetFacilityUsageHistory operation in FacilitiesApi.
 * @export
 * @interface FacilitiesApiFacilitiesControllerGetFacilityUsageHistoryRequest
 */
export interface FacilitiesApiFacilitiesControllerGetFacilityUsageHistoryRequest {
    /**
     * Facility ID
     * @type {string}
     * @memberof FacilitiesApiFacilitiesControllerGetFacilityUsageHistory
     */
    readonly id: string

    /**
     * Page number (default: 1)
     * @type {number}
     * @memberof FacilitiesApiFacilitiesControllerGetFacilityUsageHistory
     */
    readonly page?: number

    /**
     * Records per page (default: 20)
     * @type {number}
     * @memberof FacilitiesApiFacilitiesControllerGetFacilityUsageHistory
     */
    readonly limit?: number
}

/**
 * Request parameters for facilitiesControllerGetUsageStatus operation in FacilitiesApi.
 * @export
 * @interface FacilitiesApiFacilitiesControllerGetUsageStatusRequest
 */
export interface FacilitiesApiFacilitiesControllerGetUsageStatusRequest {
    /**
     * 
     * @type {FacilityUsageStatusDto}
     * @memberof FacilitiesApiFacilitiesControllerGetUsageStatus
     */
    readonly facilityUsageStatusDto: FacilityUsageStatusDto
}

/**
 * Request parameters for facilitiesControllerToggleFacilityAccess operation in FacilitiesApi.
 * @export
 * @interface FacilitiesApiFacilitiesControllerToggleFacilityAccessRequest
 */
export interface FacilitiesApiFacilitiesControllerToggleFacilityAccessRequest {
    /**
     * 
     * @type {FacilityToggleDto}
     * @memberof FacilitiesApiFacilitiesControllerToggleFacilityAccess
     */
    readonly facilityToggleDto: FacilityToggleDto
}

/**
 * Request parameters for facilitiesControllerUpdateFacility operation in FacilitiesApi.
 * @export
 * @interface FacilitiesApiFacilitiesControllerUpdateFacilityRequest
 */
export interface FacilitiesApiFacilitiesControllerUpdateFacilityRequest {
    /**
     * Facility ID
     * @type {string}
     * @memberof FacilitiesApiFacilitiesControllerUpdateFacility
     */
    readonly id: string

    /**
     * 
     * @type {UpdateFacilityDto}
     * @memberof FacilitiesApiFacilitiesControllerUpdateFacility
     */
    readonly updateFacilityDto: UpdateFacilityDto
}

/**
 * FacilitiesApi - object-oriented interface
 * @export
 * @class FacilitiesApi
 * @extends {BaseAPI}
 */
export class FacilitiesApi extends BaseAPI implements FacilitiesApiInterface {
    /**
     *        Creates a new facility for student use.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility name is unique       2. Creates facility with provided details       3. Sets default values for optional fields       4. Returns created facility information              ## Facility Management:       - Facilities can have capacity limits       - Facilities can be temporarily deactivated       - Facilities support location and description metadata     
     * @summary Create a new facility (staff/admin only)
     * @param {FacilitiesApiFacilitiesControllerCreateFacilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApi
     */
    public facilitiesControllerCreateFacility(requestParameters: FacilitiesApiFacilitiesControllerCreateFacilityRequest, options?: AxiosRequestConfig) {
        return FacilitiesApiFp(this.configuration).facilitiesControllerCreateFacility(requestParameters.createFacilityDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Soft deletes a facility by setting isActive to false.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for active sessions (prevents deletion if students are still checked in)       3. Sets facility as inactive instead of hard deletion       4. Preserves historical data              ## Safety Features:       - Cannot delete facility with active sessions       - Soft delete preserves usage history       - Can be reactivated later if needed     
     * @summary Delete facility (staff/admin only)
     * @param {FacilitiesApiFacilitiesControllerDeleteFacilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApi
     */
    public facilitiesControllerDeleteFacility(requestParameters: FacilitiesApiFacilitiesControllerDeleteFacilityRequest, options?: AxiosRequestConfig) {
        return FacilitiesApiFp(this.configuration).facilitiesControllerDeleteFacility(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Retrieves all currently active sessions for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns all active sessions for the facility       2. Includes student information for each session       3. Sorted by time-in timestamp              ## Use Cases:       - Real-time occupancy monitoring       - Emergency evacuation procedures       - Facility management       - Usage analytics     
     * @summary Get active sessions for facility (staff/admin only)
     * @param {FacilitiesApiFacilitiesControllerGetActiveSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApi
     */
    public facilitiesControllerGetActiveSessions(requestParameters: FacilitiesApiFacilitiesControllerGetActiveSessionsRequest, options?: AxiosRequestConfig) {
        return FacilitiesApiFp(this.configuration).facilitiesControllerGetActiveSessions(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Retrieves all active facilities available for student use.              ## How it works:       1. Returns all facilities where isActive is true       2. Includes current occupancy count for each facility       3. Sorted alphabetically by facility name              ## Public Access:       This endpoint is public and does not require authentication.       Students can view available facilities before timing in.     
     * @summary Get all active facilities
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApi
     */
    public facilitiesControllerGetFacilities(options?: AxiosRequestConfig) {
        return FacilitiesApiFp(this.configuration).facilitiesControllerGetFacilities(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Retrieves detailed information about a specific facility.              ## How it works:       1. Returns facility details including current occupancy       2. Includes all facility metadata       3. Shows real-time occupancy status              ## Public Access:       This endpoint is public and does not require authentication.     
     * @summary Get facility by ID
     * @param {FacilitiesApiFacilitiesControllerGetFacilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApi
     */
    public facilitiesControllerGetFacility(requestParameters: FacilitiesApiFacilitiesControllerGetFacilityRequest, options?: AxiosRequestConfig) {
        return FacilitiesApiFp(this.configuration).facilitiesControllerGetFacility(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Retrieves paginated usage history for a specific facility.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Returns paginated usage history       2. Includes both active and completed sessions       3. Sorted by time-in timestamp (newest first)       4. Supports pagination for large datasets              ## Use Cases:       - Usage analytics and reporting       - Historical data analysis       - Audit trails       - Performance monitoring     
     * @summary Get facility usage history (staff/admin only)
     * @param {FacilitiesApiFacilitiesControllerGetFacilityUsageHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApi
     */
    public facilitiesControllerGetFacilityUsageHistory(requestParameters: FacilitiesApiFacilitiesControllerGetFacilityUsageHistoryRequest, options?: AxiosRequestConfig) {
        return FacilitiesApiFp(this.configuration).facilitiesControllerGetFacilityUsageHistory(requestParameters.id, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Checks if a student is currently checked in to a specific facility.              ## How it works:       1. Validates RFID card is registered       2. Looks for active session in the specified facility       3. Returns current status and session details              ## Requirements:       - RFID card must be registered to a student              ## Use Cases:       - Status verification at facility entrance       - Integration with access control systems       - Monitoring and reporting       - Troubleshooting check-in issues     
     * @summary Check facility usage status using RFID
     * @param {FacilitiesApiFacilitiesControllerGetUsageStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApi
     */
    public facilitiesControllerGetUsageStatus(requestParameters: FacilitiesApiFacilitiesControllerGetUsageStatusRequest, options?: AxiosRequestConfig) {
        return FacilitiesApiFp(this.configuration).facilitiesControllerGetUsageStatus(requestParameters.facilityUsageStatusDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Smart endpoint that automatically handles both time-in and time-out based on current status.              ## How it works:       1. Validates RFID card is registered and email is verified       2. Checks if facility exists and is active       3. Automatically detects student\'s current facility status:          - If not in any facility: performs time-in          - If in the same facility: performs time-out          - If in different facility: returns error (must time-out first)       4. Updates user\'s current facility tracking       5. Returns action performed and session information              ## Requirements:       - RFID card must be registered to a student       - Student email must be verified       - Facility must be active       - For time-in: facility must have available capacity       - For time-out: student must have active session              ## Use Cases:       - Single RFID reader at facility entrance/exit       - Automatic time-in/time-out detection       - Simplified integration for RFID hardware       - Prevents double check-ins       - Real-time facility occupancy tracking     
     * @summary Toggle facility access using RFID
     * @param {FacilitiesApiFacilitiesControllerToggleFacilityAccessRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApi
     */
    public facilitiesControllerToggleFacilityAccess(requestParameters: FacilitiesApiFacilitiesControllerToggleFacilityAccessRequest, options?: AxiosRequestConfig) {
        return FacilitiesApiFp(this.configuration).facilitiesControllerToggleFacilityAccess(requestParameters.facilityToggleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *        Updates an existing facility\'s information.              ## Authentication required:       This endpoint requires a valid JWT access token and STAFF or ADMIN role.              ## How it works:       1. Validates facility exists       2. Checks for name conflicts if name is being updated       3. Updates facility with provided changes       4. Returns updated facility information     
     * @summary Update facility (staff/admin only)
     * @param {FacilitiesApiFacilitiesControllerUpdateFacilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FacilitiesApi
     */
    public facilitiesControllerUpdateFacility(requestParameters: FacilitiesApiFacilitiesControllerUpdateFacilityRequest, options?: AxiosRequestConfig) {
        return FacilitiesApiFp(this.configuration).facilitiesControllerUpdateFacility(requestParameters.id, requestParameters.updateFacilityDto, options).then((request) => request(this.axios, this.basePath));
    }
}
